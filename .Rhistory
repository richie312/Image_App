shiny::runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
library(RColorBrewer)
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
?downloadButton()
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
rsconnect::setAccountInfo(name='richiekalpa',
token='040A79FED1BB0C3491371EF2D2463CA7',
secret='JcwL+7hxAjDeS9wBfZ1Ijb8cSmhQS5Pj4PrbwWsA')
options(repos = c(CRAN = "https://cran.rstudio.com/"))
library(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
rsconnect::setAccountInfo(name='richiekalpa',
token='040A79FED1BB0C3491371EF2D2463CA7',
secret='JcwL+7hxAjDeS9wBfZ1Ijb8cSmhQS5Pj4PrbwWsA')
options(repos = c(CRAN = "https://cran.rstudio.com/"))
shiny::runApp('Data_Camp_Tutorials/ML_Tree_App')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
runApp('Data_Camp_Tutorials/ML_Tree_App/New_folder')
shiny::runApp('C:/Users/Richie/Desktop/Nirvikalpa_Projects/Model_App')
getwd()
rsconnect::setAccountInfo(name='richiekalpa',
token='040A79FED1BB0C3491371EF2D2463CA7',
secret='JcwL+7hxAjDeS9wBfZ1Ijb8cSmhQS5Pj4PrbwWsA')
options(repos = c(CRAN = "https://cran.rstudio.com/"))
deployApp()
deploy_App()
library(shiny)
deployAPP()
library(keras)
library(knitr)
library(DT)
library(devtools)
library(flexdashboard)
install.packages("flexdashboard")
Sidebar {.sidebar}
shiny::runApp('C:/Users/Richie/Desktop/Image_App')
shiny::runApp('C:/Users/Richie/Desktop/Image_App')
model <- application_resnet50(weights = 'imagenet')
image_path<-"D:/mug.JPG"
img<-image_load(img_path, target_size=c(224,224))
x<-image_to_array(img)
image_path<-"D:/mug.JPG"
image_path
img<-image_load(img_path, target_size=c(224,224))
img<-image_load(image_path, target_size=c(224,224))
x<-image_to_array(img)
x
dim(x)
preds<-model%>%predict(x)
x<-array_reshape(x,c(1,dim(x)))
x<-imagenet_preprocess_input(x)
preds<-model%>%predict(x)
preds
main = imagenet_decode_predictions(preds, top = 3)[[1]]
main
class(main)
library(tm)
library(wordcloud)
library(tm)
library(SnowballC)
library(RColorBrewer)
Corpus=Corpus(VectorSource(main))
Corpus=tm_map(Corpus,content_transformer(tolower))
myDTM = TermDocumentMatrix(Corpus)
m = as.matrix(myDTM)
v = sort(rowSums(m), decreasing = TRUE)
d<-data.frame(word=names(v),freq=v)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=120, random.order=FALSE, rot.per=0.35,
family= "Comic Sans MS",font = 3,
colors=brewer.pal(6, "Dark2"))
main
Corpus=Corpus(VectorSource(main$class_description))
Corpus=tm_map(Corpus,content_transformer(tolower))
myDTM = TermDocumentMatrix(Corpus)
m = as.matrix(myDTM)
v = sort(rowSums(m), decreasing = TRUE)
d<-data.frame(word=names(v),freq=v)
## WordCloud
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=120, random.order=FALSE, rot.per=0.35,
family= "Comic Sans MS",font = 3,
colors=brewer.pal(6, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=120, random.order=FALSE,
family= "Comic Sans MS",font = 3,
colors=brewer.pal(6, "Dark2"))
class(preds)
head(preds)
main = imagenet_decode_predictions(preds, top = 5)[[1]]
main
main = imagenet_decode_predictions(preds, top = 10)[[2]]
main = imagenet_decode_predictions(preds, top = 10)[[0]]
main = imagenet_decode_predictions(preds, top = 10)[[1]]
main
Corpus=Corpus(VectorSource(main$class_description))
Corpus=tm_map(Corpus,content_transformer(tolower))
myDTM = TermDocumentMatrix(Corpus)
m = as.matrix(myDTM)
v = sort(rowSums(m), decreasing = TRUE)
d<-data.frame(word=names(v),freq=v)
## WordCloud
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=120, random.order=FALSE,
family= "Comic Sans MS",font = 3,
colors=brewer.pal(6, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 3,
max.words=120, random.order=FALSE,
family= "Comic Sans MS",font = 3,
colors=brewer.pal(6, "Dark2"))
main = imagenet_decode_predictions(preds, top = 6)[[1]]
main
## WordCloud
Corpus=Corpus(VectorSource(main$class_description))
Corpus=tm_map(Corpus,content_transformer(tolower))
myDTM = TermDocumentMatrix(Corpus)
m = as.matrix(myDTM)
v = sort(rowSums(m), decreasing = TRUE)
d<-data.frame(word=names(v),freq=v)
## WordCloud
wordcloud(words = d$word, freq = d$freq, min.freq = 3,
max.words=120, random.order=FALSE,
family= "Comic Sans MS",font = 3,
colors=brewer.pal(6, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 10,
max.words=120, random.order=FALSE,
family= "Comic Sans MS",font = 3,
colors=brewer.pal(6, "Dark2"))
runApp('C:/Users/Richie/Desktop/Image_App')
model_vgg16<-application_vgg16(weights='imagenet')
runApp('C:/Users/Richie/Desktop/Image_App')
runApp('C:/Users/Richie/Desktop/Image_App')
img<-image_load(image_path, target_size=c(224,224))
img
plot(img)
imageOutput(ing)
imageOutput(img)
library(EBImage)
shiny::runApp('C:/Users/Richie/Desktop/Image_App')
install.packages("wordcloud2")
library(wordcloud2)
?wordcloud2()
shiny::runApp('C:/Users/Richie/Desktop/Image_App')
main
max(main$class_description[main$score])
max(main$class_description[main$score,])
max(main$class_description[,main$score])
max(main$class_description)
main
main$class_description(max(main$score))
main$class_description[max(main$score)]
main$class_description[max(main$score),]
main$class_description[,max(main$score)]
main$class_description%>%select(max(main$score))
main$class_description%>%filter(max(main$score))
main$class_description%>%(max(main$score))
max(main$score)
main[main$class_description==max(main$score)]
main[main$class_description==max(main$score),]
main[,main$class_description==max(main$score)]
which(max(main$score))
which.max(main$score)
main$class_description[which.max(main$score)]
letterCloud(data = d$word, word=main$class_description[which.max(main$score)],
size=input$Font,color='input$color')
demoFreq
d
letterCloud(data = d, word=main$class_description[which.max(main$score)],
size=input$Font,color='input$color')
letterCloud(data = d, word=main$class_description[which.max(main$score)],
size=2,color='random-light')
letterCloud(data = d, word=main$class_description[which.max(main$score)],
size=2,color='random-light')
letterCloud(data = d, word=main$class_description[which.max(main$score)],
size=1,color='random-light')
letterCloud(data = d, word=main$class_description[which.max(main$score)],
size=4,color='random-light')
letterCloud(data = d, word=R,
size=4,color='random-light')
letterCloud(data = d, word="R",
size=4,color='random-light')
letterCloud(data = d, word="R",
size=2,color='random-light')
wordcloud2(data = d, word="R",
size=2,color='random-light')
wordcloud2(data = d,
size=2,color='random-light')
wordcloud2(data = d,
size=1color='random-light')
wordcloud2(data = d,
size=1,color='random-light')
paste("www/",input$Image_class)
paste("www/",Bruno)
paste("www/",as.character(Bruno))
paste("www/",as.character("Bruno"))
runApp('C:/Users/Richie/Desktop/Image_App')
paste("www/",("Bruno"),sep="")
runApp('C:/Users/Richie/Desktop/Image_App')
runApp('C:/Users/Richie/Desktop/Image_App')
options(repos = c(CRAN = "https://cran.cnr.berkeley.edu/"), dependencies = TRUE)
rsconnect::setAccountInfo(name='richiekalpa',
token='040A79FED1BB0C3491371EF2D2463CA7',
secret='JcwL+7hxAjDeS9wBfZ1Ijb8cSmhQS5Pj4PrbwWsA')
options(repos = c(CRAN = "https://cran.cnr.berkeley.edu/"), dependencies = TRUE)
shiny::runApp('C:/Users/Richie/Desktop/Image_App')
shiny::runApp('C:/Users/Richie/Desktop/Image_App')
model_resnet<- application_resnet50(weights = 'imagenet')
library(keras)
model_resnet<- application_resnet50(weights = 'imagenet')
save_model_hdf5(model_resnet,file="model_resnet")
getwd()_
getwd()
setwd("C:/Users/Richie/Desktop/Image_App")
save_model_hdf5(model_resnet,file="model_resnet")
model_inception<-application_inception_v3(weights = "imagenet")
save_model_hdf5(model_inception, file = "model_inception")
